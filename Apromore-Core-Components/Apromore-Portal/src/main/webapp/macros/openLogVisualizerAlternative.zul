<!--
  #%L
  This file is part of "Apromore Core".
  Copyright (C) 2016 - 2017 Queensland University of Technology.
  %%
  Copyright (C) 2018 - 2021 Apromore Pty Ltd.
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Lesser Public License for more details.
  
  You should have received a copy of the GNU General Lesser Public
  License along with this program.  If not, see
  <http://www.gnu.org/licenses/lgpl-3.0.html>.
  #L%
  -->

<window id="win" xmlns:n="http://www.zkoss.org/2005/zk/native"
        xmlns:z="http://www.zkoss.org/2005/zul"
        use="org.apromore.portal.dialogController.LogVisualizerApromoreController">

    <n:style media="screen" type="text/css">
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/ext-all.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/file-upload.css");
        @import url("/${arg.editor}/libs/ext-2.0.2/resources/css/xtheme-gray.css");
    </n:style>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_norm.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/editor/css/theme_ext.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/xtheme-smoky.css" type="text/css"/>
    <n:link rel="Stylesheet" media="screen" href="/${arg.editor}/explorer/src/css/custom-style.css" type="text/css"/>

    <n:div id="oryxwrapper" style="display: none">
        <n:script>
            <![CDATA[
                if (!Apromore) {
                    var Apromore = {};
                }
                if (!Apromore.CONFIG) {
                    Apromore.CONFIG = {};
                }
                Apromore.CONFIG.SERVER_HANDLER_ROOT_PREFIX = '../../' + '${arg.editor}';
            ]]>
        </n:script>

        <!-- JavaScript Dependencies of Signavio Process Editor-->
        <n:script src="/${arg.editor}/libs/prototype-1.5.1.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/path_parser.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/adapter/ext/ext-base.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/ext-all.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/ext-2.0.2/color-field.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/iscroll.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/i18n/translation_en.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/libs/utils.js" type="text/javascript"/>
        <n:script src="/${arg.editor}/editor/apromore-editor.js" type="text/javascript"/>

        <!-- Include all Editor plug-ins -->
        <z:zk forEach="${arg.plugins}">
            <n:script src="${each.getJavaScriptURI()}" type="text/javascript"/>
        </z:zk>

        <n:span id="oryxstartupcode">
            <n:script>
                <![CDATA[
                    Apromore.CONFIG.PANEL_LEFT_COLLAPSED = true;

                    var urlData = '${arg.url}';

                    // This function is called upon load of all Oryx dependencies
                    window.onOryxResourcesLoaded = function() {
                        var oryxEditor = new Apromore.Editor ({
                            model : {
                                id : 'oryx-canvas123',
                                stencilset : {
                                    url : '${arg.url}',
                                    namespace : '${arg.url}'
                                },
                            },
                            fullscreen : true
                        });
                        Ext.select('svg').setVisible(false);

                        // Import new process model
                        new Ajax.Request('${arg.importPath}', {
                            parameters: {
                                'data': '${arg.jsonData}',
                            },
                            method: 'POST',

                            onSuccess: function(transport) {
                                var editorConfig = Ext.decode(transport.responseText);
                                oryxEditor.importJSON(editorConfig, true);

                                // Call Auto-Layout if everything is available
                                window.setTimeout(function() {
                                    var layouter;
                                    if (urlData == 'http://b3mn.org/stencilset/epc#') {
                                        layouter = oryxEditor.pluginsData.find(function(pluginData) {
                                            return pluginData.name === "Layout-EPC";
                                        });
                                    } else if (urlData == 'http://b3mn.org/stencilset/bpmn1.1#' || urlData == 'http://b3mn.org/stencilset/bpmn2.0#') {
                                        layouter = oryxEditor.pluginsData.find(function(pluginData) {
                                            return pluginData.name === "Layout-BPMN";
                                        });
                                    }

                                    var doAutoLayout = '${arg.doAutoLayout}' === 'true';
                                    if (layouter && doAutoLayout) {
                                        layouter.functionality();                                            
                                    }

                                    Ext.select('svg').setVisible(true);
                                    window.onbeforeunload = null;
                                }, 1000);
                            }.bind(this),

                            onFailure: function(transport) {
                                alert("Failed to load process fragment!");
                            }.bind(this)
                        });
                    };
                ]]>
            </n:script>
        </n:span>
    </n:div>

    <n:div id="oryx-canvas123"></n:div>
</window>

